Scientific Calculator with GUI

A Python-based Scientific Calculator built with the Tkinter library, designed to perform both basic arithmetic and advanced mathematical computations in a user-friendly graphical interface.


---

✨ Features

🔢 Basic Arithmetic Operations

Addition (+), Subtraction (-), Multiplication (*), Division (/)


📐 Advanced Mathematical Functions

Square Root (√): Calculate square root values.

Exponentiation (^): Perform power operations.

Logarithmic Functions:

log: Base-10 logarithm.

ln: Natural logarithm (base e).


Trigonometric Functions:

sin, cos, tan: Compute trigonometric values for angles (in degrees).


Factorial (!): Calculate the factorial of integers.


🚫 Error Handling

Gracefully handles invalid inputs (e.g., non-numeric input, division by zero).

Displays clear error messages in a pop-up window.


💻 Interactive GUI

Responsive buttons for operations.

A clean, keyboard-like layout.

Supports real-time computation and intuitive design.



---

📸 Screenshots

(Include a screenshot of the calculator interface here.)


---

🛠 How to Install and Run

📋 Prerequisites

1. Python 3.x must be installed on your system.


2. Tkinter comes pre-installed with Python on most distributions.



💡 Steps to Run

1. Clone this repository to your local machine:

git clone https://github.com/your-username/scientific-calculator.git
cd scientific-calculator


2. Run the script:

python scientific_calculator_gui.py


3. The Scientific Calculator application will launch.




---

📂 Project Structure

scientific_calculator_gui.py: Main Python script containing the implementation.

Dependencies: No external libraries are required apart from Python’s standard library.



---

💡 Usage Instructions

1. Input: Use the on-screen buttons to input numbers and select operations.


2. Operations:

Press = to compute the result.

Use C to clear the input field.



3. Advanced Functions:

For square root, logarithms, or trigonometric functions, input the value and press the corresponding button.





---

🔍 Example Calculations


---

🌟 Key Features in Detail

Responsive Layout:

Buttons are dynamically sized and positioned for a seamless user experience.


Real-Time Error Handling:

Invalid inputs are immediately flagged with pop-ups to avoid crashes.


Cross-Platform Compatibility:

Works on Windows, macOS, and Linux.




---

🚀 Future Enhancements

1. Modern Styling:

Incorporate advanced libraries like CustomTkinter for a sleeker interface.



2. Keyboard Support:

Add keyboard shortcuts for quick input.



3. History Feature:

Display past calculations in a separate panel.



4. Custom Expression Parser:

Replace eval() with a safer and more robust parser.





---

🤝 Contributing

We welcome contributions to enhance this project!

1. Fork this repository.


2. Create a feature branch:

git checkout -b feature-name


3. Commit your changes:

git commit -m "Add feature-name"


4. Push to your branch:

git push origin feature-name


5. Open a pull request.




---

📜 License

This project is licensed under the MIT License. Feel free to use, modify, and distribute it.


---

🙌 Acknowledgements

Python Documentation: https://docs.python.org

Tkinter Documentation: Tkinter GUI Programming


